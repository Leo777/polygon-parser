/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package polygon;

import java.io.IOException;
import java.net.http.HttpResponse;
import java.util.ArrayList;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
/*TODO:
* 1. Provide multiple nodes urls for fetching data
* 2. Create class to store data to db (click House)
* 3. Run code in multiple threads
* 4. Add to the client possibility to fetch logs 
*/
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import org.json.JSONArray;
import org.json.JSONObject;

public class App {

    public static void main(String[] args) throws IOException, InterruptedException {

        List<String> nodesURLs = Arrays.asList("https://1rpc.io/matic",
                "https://polygon-mainnet.g.alchemy.com/v2/demo",
                "https://rpc.ankr.com/polygon", "https://polygon-mainnet.public.blastapi.io",
                "https://polygon.blockpi.network/v1/rpc/public",
                "https://polygon.rpc.blxrbdn.com",
                "https://matic-mainnet-archive-rpc.bwarelabs.com",
                "https://matic-mainnet.chainstacklabs.com");

         // File to write the results
         String outputFile = "responses.txt";
         Path path = Paths.get(outputFile);

        PolygonClient client = new PolygonClient();

        Executor executor = Executors.newFixedThreadPool(10);
        List<CompletableFuture<HttpResponse<String>>> futures = new ArrayList<>();

        long start = System.currentTimeMillis();

        int current = 0;
        int end = 100;
        while (current < end) {

            // Start the asynchronous operation
            CompletableFuture<HttpResponse<String>> futureResponse = client
                    .getBlocksAsync("https://1rpc.io/matic", current, current + 10, executor);

            // // Do other things if needed, or wait for the completion
            futureResponse.thenAcceptAsync(response -> {
                JSONArray responses = new JSONArray(response.body());
                for (int i = 0; i < responses.length(); i++) {
                    JSONObject blockInfo = responses.getJSONObject(i);
                    var result = blockInfo.getJSONObject("result");
                    var hexString = result.getString("number");
                    hexString = hexString.replace("0x", "");
                    var intBlocknumber = Integer.parseInt(hexString, 16);
                    System.out.println("Block number: " + intBlocknumber);

                    try {
                        // Writing the response to a file with synchronized block
                        synchronized (App.class) {
                            Files.writeString(path, intBlocknumber + System.lineSeparator(), 
                                              StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.APPEND);
                        }
                    } catch (Exception e) {
                        System.err.println("Failed to write to file: " + e.getMessage());
                    }
                    // storeBlockData(conn, blockInfo.getInt("id"), blockInfo.toString());
                }

            }, executor).exceptionally(e -> {
                System.out.println("ERROR: " + e.getMessage()); // More detailed error message
                e.printStackTrace(); // Print stack trace for detailed debug info

                // TODO: Save failed blocks range or retry with new url
                return null;
            });
            futures.add(futureResponse);

            current += 10;
        }

        CompletableFuture<Void> allDone = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
        allDone.join(); // Blocks until all futures complete
        // Optionally, block to wait for completion
        // Only use join if you need to wait for the result

        // var response = client.getBlocks("https://polygon.rpc.blxrbdn.com", 25, 50);
        // // Print response body

        // System.out.println(response.body());
        // System.out.println(response.headers());

    }
}
